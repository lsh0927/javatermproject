import java.io.*;
import java.net.*;
import javax.swing.JFrame; 
import javax.swing.JPanel;


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import java.io.*;
import java.net.*;
import javax.swing.JFrame; 
import javax.swing.JPanel;


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;

import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class RSTClient {

	   public static void main(String[] args) {
	      RSTGUI gui = new RSTGUI();
	   }

	}

	class RSTGUI extends JFrame {
	   
	   //게임 관련 변수 선언
	   private long starttime;
	   private long finishtime;
	   private long finaltime;
	   private int startsignal=0;
	   
	   //GUI 관련 변수 선언
	   private JTextField myname=new JTextField("");
	   private JTextArea myscore=new JTextArea("반응속도\n테스트게임\n\n나의 기록");
	   private JTextField ReadyState=new JTextField("대기중입니다.");
	   private JCheckBox ready = new JCheckBox("준비", false);
	   private JTextArea result=new JTextArea("게임 진행 결과\n");
	   private RSTPanel RST;
	   
	   //통신 관련 변수 선언
	   Socket c;
	   BufferedReader in;
	   PrintWriter out;
	   
	   //GUI 및 네트워크 연결 부분
	   public RSTGUI() {
	      
	      //프레임 생성
	      setTitle("ResponseSpeedTest");
	      setSize(800,600);
	      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	      setVisible(true);
	      Container container = getContentPane();
	      container.setLayout(new GridLayout(1,3,5,5));
	      
	      
	      //사용자 이름 및 내 기록 배치 (좌측)
	      JPanel textgroup = new JPanel();
	      textgroup.setLayout(new BorderLayout());
	      textgroup.add(myname,BorderLayout.NORTH);
	      textgroup.add(myscore,BorderLayout.CENTER);
	      container.add(textgroup);
	      
	      //메인 패널 배치 (중앙)
	      RST = new RSTPanel();
	      JPanel maingroup = new JPanel();
	      ReadyState.setHorizontalAlignment(JTextField.CENTER);
	      ready.setHorizontalAlignment(JCheckBox.CENTER);
	      maingroup.setLayout(new GridLayout(3,1));
	      maingroup.add(ReadyState);
	      maingroup.add(RST);
	      maingroup.add(ready);
	      container.add(maingroup);
	      
	      //게임 결과판 배치 (우측)
	      container.add(result);
	      
	      //준비 버튼 이벤트리스너 할당
	      ready.addItemListener(new ReadyListener());
	      
	      //서버와 통신
	      try {
	         c = new Socket("",5000);
	         in = new BufferedReader
	               (new InputStreamReader(c.getInputStream()));
	         out = new PrintWriter
	               (c.getOutputStream(),true);
	         String name=in.readLine();
	         
	         //사용자 번호 할당
	         System.out.println(name);
	         myname.setText(name);
	         
	         //메인 구동 부분
	         while(true) {
	            String line = in.readLine();
	            if(line.trim().equals("색깔이 바뀌면 클릭해주세요.")) ReadyState.setText(line);
	            
	            //서버에게서 start신호를 받으면 시작신호 1로 설정 후 패널 색깔 변화
	            //신호를 받은 시점의 시간을 저장하고 비활성화된 ready버튼을 다시 활성화시킴
	            else if(line.trim().equals("start")) {
	               startsignal=1;
	               starttime=System.currentTimeMillis();
	               RST.changecolor(startsignal);
	               ready.setEnabled(true);
	               ready.setSelected(false);
	               
	            }
	            //승자의 정보를 받아 결과판에 출력
	            else {
	               result.append("\n"+line);
	               ReadyState.setText("결과 출력 완료");
	            }
	         }
	      } catch (Exception e) {}      
	   }
	   //준비 버튼에 대한 리스너
	   private class ReadyListener implements ItemListener
	   {
	      public void itemStateChanged(ItemEvent event)
	      {
	         //준비버튼을 누르면 시작신호, 패널색깔을 초기화하고 버튼을 비활성화
	         //서버에 ready신호를 보내고 패널에대한 마우스이벤트를 활성화
	         if(event.getStateChange()==ItemEvent.SELECTED) {
	            startsignal=0;
	            RST.changecolor(startsignal);
	            ready.setEnabled(false);
	            
	            out.println("ready");
	            RST.addMouseListener(new RTListener());
	         }
	      }
	      
	   }
	   //패널을 위한 클래스
	   class RSTPanel extends JPanel {
	      
	      public RSTPanel() {
	         setBackground(Color.red);
	      }
	      public void changecolor(int i)
	      {
	         if(i==1)
	            setBackground(Color.green);
	         if(i==0)
	            setBackground(Color.red);
	      }
	      
	   }
	   //마우스리스너 작성부분
	   class RTListener extends MouseAdapter{
	      public void mouseClicked(MouseEvent e) {
	         //시작신호를 받기 전에 클릭할 경우 부정행위 처리
	         if(startsignal==0) { 
	            finaltime=100000;
	            ReadyState.setText("TO FAST! TIME SET 10SEC.");
	            myscore.append("\n반응 시간: TO FAST");
	            RST.removeMouseListener(this);
	            out.println(finaltime);
	         }
	         //클릭한 시간-시작시간으로 반응속도를 측정하여 서버에 전송
	         else if(startsignal==1) {
	            RST.changecolor(0);
	            ReadyState.setText("결과를 기다리는 중입니다.");
	            finishtime= System.currentTimeMillis(); 
	            finaltime=  finishtime-starttime;
	            myscore.append("\n반응 시간 : "+(double)finaltime/1000);
	            RST.removeMouseListener(this);
	            out.println(finaltime);
	         }
	      }
	   }
	}
