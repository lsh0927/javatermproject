import java.io.*;
import java.net.*;
import javax.swing.JFrame; 
import javax.swing.JPanel;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;


import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.*;

public class RSTServer {
	   //Thread타입의 어레이리스트를 만들어 관리
	   static ArrayList<Thread> UserList = new ArrayList<Thread>();

	   //서버 연결 메소드
	   public void startserver() {
	      int usernum=1;
	      
	      try {
	         ServerSocket s = new ServerSocket(5000);
	         
	         while(true) {
	            Socket incoming = s.accept();
	            System.out.println("사용자 " + usernum +" 입장");
	            
	            ThreadedRST thread = new ThreadedRST(this, incoming, usernum);
	            UserList.add(thread);
	            thread.start();
	            
	            usernum++;
	            
	         }
	      } catch(Exception e) { System.out.println(e); }
	   }
	   //모든 클라이언트에 같은 문자열을 보내는 메소드. 중복접근을 막기 위해 동기화
	   public synchronized void sendAll(String msg) {
	      for(int i=0; i<UserList.size();i++) {
	         ThreadedRST thread = (ThreadedRST)UserList.get(i);
	         thread.Send(msg);
	      }
	   }
	   //클라이언트가 퇴장했을 시 리스트에서 제거하기 위한 메소드
	   public synchronized void removeUser(Thread thread) {
	      UserList.remove(thread);
	   }
	}
	//멀티클라이언트를 위한 쓰레드 클래스
	class ThreadedRST extends Thread {
	   //각 유저의 반응시간을 비교하여 승자를 판단하기 위한 어레이리스트
	   static ArrayList<User> timelist= new ArrayList<User>();
	   
	   //서버 관련 변수 선언
	   RSTServer server;
	   private Socket incoming;
	   private int counter;
	   private BufferedReader in;
	   private PrintWriter out;
	   
	   //게임 관련 변수 선언
	   static int peoplenum=0;
	   static int readypeople=0;
	   static int timenum=0;
	   double min=9999;
	   int winner;
	   
	   
	   public ThreadedRST(RSTServer s, Socket i, int c) {
	      server = s;
	      incoming = i;
	      counter = c;
	      peoplenum++;
	   }
	   public void run() {
	      try {
	         in = new BufferedReader
	               (new InputStreamReader(incoming.getInputStream()));
	         out = new PrintWriter
	               (incoming.getOutputStream(), true);
	         
	         //각 클라이언트 번호 할당
	         out.println("사용자 "+counter);
	         while(true) {
	            String line = in.readLine();
	            //ready신호를 받으면 준비된 readypeople증가
	            if(line.trim().equals("ready")) readypeople++; 
	            //반응시간을 받았을 때 timenum증가시키고 어레이리스트에 객체 형태로 저장
	            else if(!line.trim().equals("ready")) {
	               timenum++;
	               double time=Double.parseDouble(line);
	               timelist.add(new User(counter, time));
	            }
	            //준비된 유저가 총 유저 수와 같으면 readypeople를 초기화하고 0~7초 뒤 시작신호 전송
	            if(readypeople==peoplenum) {
	               readypeople=0;
	               server.sendAll("색깔이 바뀌면 클릭해주세요.");
	               Random r = new Random();
	               sleep(r.nextInt(7000));
	               server.sendAll("start");
	            }
	            //모든 유저가 반응하면 가장 빠른 유저 판단 후 전송, timenum과 어레이리스트 초기화
	            if(timenum==peoplenum) {
	               timenum=0;
	               for(int i=0; i<timelist.size();i++)
	               {
	                  if(timelist.get(i).getTime()<min)
	                  {
	                     min= timelist.get(i).getTime();
	                     winner=timelist.get(i).getSerial();
	                  }
	               }
	               server.sendAll("사용자 "+winner+" 이(가) "+(min/1000)+"초로 승리했습니다.");
	               timelist.clear();
	               //서버에서 승자 확인용
	               System.out.println("승리자 : 사용자 "+winner);
	            }
	         }
	      //유저 퇴장 시 전송 및 리스트에서 제거
	      } catch(IOException ioe) 
	      { System.out.println("사용자 "+counter+" 퇴장"); peoplenum--; server.removeUser(this);}
	      catch(Exception e) { System.out.println(e); }
	      
	      finally{
	         try{
	            incoming.close();
	         } catch (Exception e) { System.out.println(e); }
	      }
	   }
	   //sendAll()메소드 구현을 위한 out.println를 public 메소드화함
	   public void Send(String msg) {
	      out.println(msg);
	   }
	}
	//반응시간 비교 및 승자 판단 위한 클래스
	class User{
	   int serial;
	   double time;
	   public User(int s, double t) {
	      serial = s;
	      time = t;
	   }
	   public double getTime() {
	      return time;
	   }
	   public int getSerial() {
	      return serial;
	   }
	}
